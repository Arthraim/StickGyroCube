#include <Arduino.h>
#include <U8g2lib.h>
#include "Projection.h"
#include "MPU9250.h"
#include <string>

U8G2_SH1107_64X128_F_4W_HW_SPI u8g2(U8G2_R0,14, /* dc=*/ 27, /* reset=*/ 33);

#define UPDATE_DELAY  0
#define SCALE 1
#define STEP 0.5

float roll, pitch, yaw;

Transform cubeTrans;

// Model vertices
const byte NUM_VERTICES = 92;
point3 vertices[] = {
    {0.44897145032883, 0.57268017530441, -0.42301297187805},
    {0.4409122467041, 0.57268017530441, -0.60691827535629},
    {0.41899618506432, 0.57268017530441, -0.76644563674927},
    {0.24614116549492, 0.57268017530441, -1.21787202358246},
    {-0.060940425843, 0.57268017530441, -1.53798985481262},
    {-0.17105701565742, 0.57268017530441, -1.61015868186951},
    {-0.30408829450607, 0.57268017530441, -1.68142020702362},
    {-0.40025672316551, 0.57268017530441, -1.72459924221039},
    {-1.47734498977661, 0.57268017530441, -1.20439338684082},
    {-1.2555673122406, 0.57268017530441, -1.17229890823364},
    {-0.98079138994217, 0.57268017530441, -1.10625839233398},
    {-0.56240183115005, 0.57268017530441, -0.76021730899811},
    {-0.54094159603119, 0.57268017530441, -0.71568667888641},
    {-0.50040972232819, 0.57268017530441, -0.59278458356857},
    {-0.48303070664406, 0.57268017530441, -0.50033420324326},
    {-0.47260329127312, 0.57268017530441, -0.39772754907608},
    {0.44897145032883, -0.42731985449791, -0.42301297187805},
    {0.4409122467041, -0.42731985449791, -0.60691827535629},
    {0.41899618506432, -0.42731985449791, -0.76644563674927},
    {0.34617564082146, -0.42731985449791, -1.02216517925262},
    {0.11813793331385, -0.42731985449791, -1.3816944360733},
    {0.07911352813244, -0.42731985449791, -1.42122733592987},
    {0.02934759110212, -0.42731985449791, -1.46669888496399},
    {-0.060940425843, -0.42731985449791, -1.53798985481262},
    {-0.17105701565742, -0.42731985449791, -1.61015868186951},
    {-0.30408829450607, -0.42731985449791, -1.68142020702362},
    {-0.40025672316551, -0.42731985449791, -1.72459924221039},
    {-0.51560002565384, -0.42731985449791, -1.76903665065765},
    {-0.72567772865295, -0.42731985449791, -1.83260881900787},
    {-1.47734498977661, -0.42731985449791, -1.20439338684082},
    {-0.98079138994217, -0.42731985449791, -1.10625839233398},
    {-0.90341395139694, -0.42731985449791, -1.07508778572083},
    {-0.83704501390457, -0.42731985449791, -1.04106640815735},
    {-0.79708105325699, -0.42731985449791, -1.01670277118683},
    {-0.75357031822205, -0.42731985449791, -0.98627382516861},
    {-0.58656674623489, -0.42731985449791, -0.80258333683014},
    {-0.56240183115005, -0.42731985449791, -0.76021730899811},
    {-0.54094159603119, -0.42731985449791, -0.71568667888641},
    {-0.47260329127312, -0.42731985449791, -0.39772754907608},
    {-0.46912750601768, -0.42731985449791, -0.28496420383453},
    {-0.46771746873856, -0.42731985449791, 0.16923360526562},
    {-0.46631395816803, -0.42731985449791, 0.66208124160767},
    {-0.47053754329681, -0.42731985449791, 1.36477327346802},
    {-0.47757467627525, -0.42731985449791, 1.85210406780243},
    {0.45460507273674, 0.57268017530441, 1.85210406780243},
    {0.45178499817848, 0.57268017530441, 1.35096836090088},
    {0.44897145032883, 0.57268017530441, 0.69521421194077},
    {0.44897145032883, 0.57268017530441, 0.19270253181458},
    {0.38959658145905, 0.57268017530441, -0.89297449588776},
    {0.34617564082146, 0.57268017530441, -1.02216517925262},
    {0.30060786008835, 0.57268017530441, -1.1230012178421},
    {0.189512565732, 0.57268017530441, -1.29815590381622},
    {0.11813793331385, 0.57268017530441, -1.3816944360733},
    {0.07911352813244, 0.57268017530441, -1.42122733592987},
    {0.02934759110212, 0.57268017530441, -1.46669888496399},
    {-0.51560002565384, 0.57268017530441, -1.76903665065765},
    {-0.72567772865295, 0.57268017530441, -1.83260881900787},
    {-0.99164843559265, 0.57268017530441, -1.88813638687134},
    {-1.30555510520935, 0.57268017530441, -1.9277960062027},
    {-1.063361287117, 0.57268017530441, -1.13122820854187},
    {-0.90341395139694, 0.57268017530441, -1.07508778572083},
    {-0.83704501390457, 0.57268017530441, -1.04106640815735},
    {-0.79708105325699, 0.57268017530441, -1.01670277118683},
    {-0.75357031822205, 0.57268017530441, -0.98627382516861},
    {-0.70511186122894, 0.57268017530441, -0.94571852684021},
    {-0.66112530231476, 0.57268017530441, -0.90158498287201},
    {-0.62161034345627, 0.57268017530441, -0.85387325286865},
    {-0.58656674623489, 0.57268017530441, -0.80258333683014},
    {-0.51979953050613, 0.57268017530441, -0.66087186336517},
    {-0.46912750601768, 0.57268017530441, -0.28496420383453},
    {-0.46771746873856, 0.57268017530441, 0.16923360526562},
    {-0.46631395816803, 0.57268017530441, 0.66208124160767},
    {-0.47053754329681, 0.57268017530441, 1.36477327346802},
    {-0.47757467627525, 0.57268017530441, 1.85210406780243},
    {0.45460507273674, -0.42731985449791, 1.85210406780243},
    {0.45178499817848, -0.42731985449791, 1.35096836090088},
    {0.44897145032883, -0.42731985449791, 0.69521421194077},
    {0.44897145032883, -0.42731985449791, 0.19270253181458},
    {0.38959658145905, -0.42731985449791, -0.89297449588776},
    {0.30060786008835, -0.42731985449791, -1.1230012178421},
    {0.24614116549492, -0.42731985449791, -1.21787202358246},
    {0.189512565732, -0.42731985449791, -1.29815590381622},
    {-0.99164843559265, -0.42731985449791, -1.88813638687134},
    {-1.30555510520935, -0.42731985449791, -1.9277960062027},
    {-1.2555673122406, -0.42731985449791, -1.17229890823364},
    {-1.063361287117, -0.42731985449791, -1.13122820854187},
    {-0.70511186122894, -0.42731985449791, -0.94571852684021},
    {-0.66112530231476, -0.42731985449791, -0.90158498287201},
    {-0.62161034345627, -0.42731985449791, -0.85387325286865},
    {-0.51979953050613, -0.42731985449791, -0.66087186336517},
    {-0.50040972232819, -0.42731985449791, -0.59278458356857},
    {-0.48303070664406, -0.42731985449791, -0.50033420324326}};

// Model line indices
// Each pair of indices defines a line
const unsigned int NUM_INDICES = 276;
byte lineIndices[] = {
    74, 75,
    75, 45,
    45, 44,
    44, 74,
    75, 76,
    76, 46,
    46, 45,
    76, 77,
    77, 47,
    47, 46,
    77, 16,
    16, 0,
    0, 47,
    16, 17,
    17, 1,
    1, 0,
    17, 18,
    18, 2,
    2, 1,
    18, 78,
    78, 48,
    48, 2,
    78, 19,
    19, 49,
    49, 48,
    19, 79,
    79, 50,
    50, 49,
    79, 80,
    80, 3,
    3, 50,
    80, 81,
    81, 51,
    51, 3,
    81, 20,
    20, 52,
    52, 51,
    20, 21,
    21, 53,
    53, 52,
    21, 22,
    22, 54,
    54, 53,
    22, 23,
    23, 4,
    4, 54,
    23, 24,
    24, 5,
    5, 4,
    24, 25,
    25, 6,
    6, 5,
    25, 26,
    26, 7,
    7, 6,
    26, 27,
    27, 55,
    55, 7,
    27, 28,
    28, 56,
    56, 55,
    28, 82,
    82, 57,
    57, 56,
    82, 83,
    83, 58,
    58, 57,
    83, 29,
    29, 8,
    8, 58,
    29, 84,
    84, 9,
    9, 8,
    84, 85,
    85, 59,
    59, 9,
    85, 30,
    30, 10,
    10, 59,
    30, 31,
    31, 60,
    60, 10,
    31, 32,
    32, 61,
    61, 60,
    32, 33,
    33, 62,
    62, 61,
    33, 34,
    34, 63,
    63, 62,
    34, 86,
    86, 64,
    64, 63,
    86, 87,
    87, 65,
    65, 64,
    87, 88,
    88, 66,
    66, 65,
    88, 35,
    35, 67,
    67, 66,
    35, 36,
    36, 11,
    11, 67,
    36, 37,
    37, 12,
    12, 11,
    37, 89,
    89, 68,
    68, 12,
    89, 90,
    90, 13,
    13, 68,
    90, 91,
    91, 14,
    14, 13,
    91, 38,
    38, 15,
    15, 14,
    38, 39,
    39, 69,
    69, 15,
    39, 40,
    40, 70,
    70, 69,
    40, 41,
    41, 71,
    71, 70,
    41, 42,
    42, 72,
    72, 71,
    42, 43,
    43, 73,
    73, 72,
    43, 74,
    44, 73};

// Create a camera
Camera cam(64, 128);

// MPU9250
MPU9250 IMU;
int ax, ay, az;
int deltaX, deltaY, deltaZ;

void setup() {
    u8g2.begin();

    // Camera starts out at origin, looking along world +Y axis (its own +Z axis).
    // Set camera back a few units so cube will be in view.
    cam.transform.y = -5;

    // Setup MPU9250
    Wire.begin(21, 22, 100000);
    IMU.calibrateMPU9250(IMU.gyroBias, IMU.accelBias);
    IMU.initMPU9250();
    IMU.initAK8963(IMU.magCalibration);
}

void loop() {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_6x12_tr);
    u8g2.drawStr(0, 7, "@ArthurWXY");

    updateAccelerometerState();
    updateCube();
    drawCube();

    u8g2.sendBuffer();
    delay(UPDATE_DELAY);
}

void updateCube() {
    // Update cube transform
    cubeTrans = Transform(
        roll -= (deltaY / 100), // += (deltaX / 100),
        pitch, // += (deltaY / 100),
        yaw += (deltaX / 100), // += (deltaZ / 100),
        SCALE, SCALE, SCALE,
        0, 0, 0
        );
}

void drawCube() {
    point3 verts[NUM_VERTICES];

    // Apply cube transform to vertices
    for (byte i = 0; i < NUM_VERTICES; i++) {
        verts[i] = cubeTrans * vertices[i];
    }

    // Draw projected cube lines
    for (unsigned int i = 0; i < NUM_INDICES; i += 2) {
        // Get line to project
        line3 cubeLine = {
            verts[lineIndices[i]],
            verts[lineIndices[i + 1]]
        };

        // Project line to screen
        line2 line = cam.project(cubeLine);

        // Draw if not clipped completely
        if (!isnan(line.p0.x)) {
            u8g2.drawLine(line.p0.x, line.p0.y, line.p1.x, line.p1.y);
        }
    }
}

void updateAccelerometerState() {
    // If intPin goes high, all data registers have new data
    // On interrupt, check if data ready interrupt
    if (IMU.readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01) {
        IMU.readAccelData(IMU.accelCount);
        IMU.getAres();

        IMU.ax = (float)IMU.accelCount[0] * IMU.aRes - IMU.accelBias[0];
        IMU.ay = (float)IMU.accelCount[1] * IMU.aRes - IMU.accelBias[1];
        IMU.az = (float)IMU.accelCount[2] * IMU.aRes - IMU.accelBias[2];

        // Accelerometer in mg
        if (ax == 0 || ay == 0 || az == 0) {
            ax = (int)(1000 * IMU.ax);
            ay = (int)(1000 * IMU.ay);
            az = (int)(1000 * IMU.az);
        } else {
            deltaX = (int)(1000 * IMU.ax) - ax;
            deltaY = (int)(1000 * IMU.ay) - ay;
            deltaZ = (int)(1000 * IMU.az) - az;
        }

        drawXYZ(deltaX, deltaY, deltaZ);

        char buffer[20];
        itoa(ax, buffer,10);
        u8g2.drawStr(35, 128-2*7, buffer);
        itoa(ay, buffer,10);
        u8g2.drawStr(35, 128-1*7, buffer);
        itoa(az, buffer,10);
        u8g2.drawStr(35, 128-0*7, buffer);
    }
}

void drawXYZ(int x, int y, int z) {
    char buffer[20];
    itoa(x, buffer,10);
    u8g2.drawStr(0, 128-2*7, buffer);
    itoa(y, buffer,10);
    u8g2.drawStr(0, 128-1*7, buffer);
    itoa(z, buffer,10);
    u8g2.drawStr(0, 128-0*7, buffer);
}
